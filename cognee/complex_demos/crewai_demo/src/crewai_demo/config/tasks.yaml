soft_skills_assessment_applicant1_task:
  description: >
    Search cognee for comments authored by '{applicant_1}'.
    Evaluate their communication clarity, community engagement, and kindness.
    Ask multiple questions if needed to uncover diverse interactions.
    Return a complete and reasoned assessment of their soft skills.
  expected_output: >
    - Name: {applicant_1}
    - communication_clarity (0–1)
    - community_engagement (0–1)
    - kindness (0–1)
    - reasoning: (string)
  agent: soft_skills_expert_agent

soft_skills_assessment_applicant2_task:
  description: >
    Search cognee for comments authored by '{applicant_2}'.
    Evaluate their communication clarity, community engagement, and kindness.
    Ask multiple questions if needed to uncover diverse interactions.
    Return a complete and reasoned assessment of their soft skills.
  expected_output: >
    - Name: {applicant_2}
    - communication_clarity (0–1)
    - community_engagement (0–1)
    - kindness (0–1)
    - reasoning: (string)
  agent: soft_skills_expert_agent

technical_assessment_task:
  description: >
    Evaluate each candidate’s codebase and commit history to produce
    scores for code_diversity, depth_of_contrib, and commit_quality,
    along with narrative comments detailing your findings. Use strictly the technical input
    when you are scoring the candidate, you are not allowed to make any comment about soft skills.
    The people to evaluate are:
        -{applicant_1}
        -{applicant_2}
    You can search them by code changed by the 'person', however you are allowed
    and encouraged to ask multiple questions.
  expected_output: >
    results strictly containing:
      - Name of the person
      - code_diversity (0–1),
      - depth_of_contribution (0–1),
      - commit_quality (0–1),
      - reasoning (string)
  agent: technical_expert_agent

hiring_decision_task:
  description: >
    Review the technical_assessment_task and soft_skills_assessment_task outputs,
    then decide HIRE or NO_HIRE for each candidate with a detailed reasoning.
    The people to evaluate are:
      -{applicant_1}
      -{applicant_2}
    We have to hire one of them.
  expected_output: >
    A string strictly containing the following for each person:
      - Person
      - decision: "HIRE" or "NO_HIRE",
      - reasoning: (string)
  agent: decision_maker_agent
